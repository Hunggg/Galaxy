// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: proto/wearables/v1/wearables.proto

package wearables

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Data models
type WearableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creativity uint64 `protobuf:"varint,1,opt,name=creativity,proto3" json:"creativity,omitempty"`
	Charisma   uint64 `protobuf:"varint,2,opt,name=charisma,proto3" json:"charisma,omitempty"`
	Resolve    uint64 `protobuf:"varint,3,opt,name=resolve,proto3" json:"resolve,omitempty"`
	Fitness    uint64 `protobuf:"varint,4,opt,name=fitness,proto3" json:"fitness,omitempty"`
	Intellect  uint64 `protobuf:"varint,5,opt,name=intellect,proto3" json:"intellect,omitempty"`
}

func (x *WearableStats) Reset() {
	*x = WearableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableStats) ProtoMessage() {}

func (x *WearableStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableStats.ProtoReflect.Descriptor instead.
func (*WearableStats) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{0}
}

func (x *WearableStats) GetCreativity() uint64 {
	if x != nil {
		return x.Creativity
	}
	return 0
}

func (x *WearableStats) GetCharisma() uint64 {
	if x != nil {
		return x.Charisma
	}
	return 0
}

func (x *WearableStats) GetResolve() uint64 {
	if x != nil {
		return x.Resolve
	}
	return 0
}

func (x *WearableStats) GetFitness() uint64 {
	if x != nil {
		return x.Fitness
	}
	return 0
}

func (x *WearableStats) GetIntellect() uint64 {
	if x != nil {
		return x.Intellect
	}
	return 0
}

type Wearables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WearableId string         `protobuf:"bytes,2,opt,name=wearable_id,json=wearableId,proto3" json:"wearable_id,omitempty"`
	Type       string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name       string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Gender     string         `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Rarity     string         `protobuf:"bytes,6,opt,name=rarity,proto3" json:"rarity,omitempty"`
	Changeable bool           `protobuf:"varint,7,opt,name=changeable,proto3" json:"changeable,omitempty"`
	IsOrigin   bool           `protobuf:"varint,8,opt,name=is_origin,json=isOrigin,proto3" json:"is_origin,omitempty"`
	IsRequired bool           `protobuf:"varint,9,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Image      string         `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Stats      *WearableStats `protobuf:"bytes,11,opt,name=stats,proto3" json:"stats,omitempty"`
	OnChainId  uint64         `protobuf:"varint,12,opt,name=on_chain_id,json=onChainId,proto3" json:"on_chain_id,omitempty"`
}

func (x *Wearables) Reset() {
	*x = Wearables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wearables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wearables) ProtoMessage() {}

func (x *Wearables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wearables.ProtoReflect.Descriptor instead.
func (*Wearables) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{1}
}

func (x *Wearables) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wearables) GetWearableId() string {
	if x != nil {
		return x.WearableId
	}
	return ""
}

func (x *Wearables) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Wearables) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wearables) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Wearables) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *Wearables) GetChangeable() bool {
	if x != nil {
		return x.Changeable
	}
	return false
}

func (x *Wearables) GetIsOrigin() bool {
	if x != nil {
		return x.IsOrigin
	}
	return false
}

func (x *Wearables) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *Wearables) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Wearables) GetStats() *WearableStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Wearables) GetOnChainId() uint64 {
	if x != nil {
		return x.OnChainId
	}
	return 0
}

type WearableOnchainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxSupply          uint64 `protobuf:"varint,3,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	CurrentSupply      uint64 `protobuf:"varint,4,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply,omitempty"`
	Type               string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Rarity             string `protobuf:"bytes,6,opt,name=rarity,proto3" json:"rarity,omitempty"`
	CreatedAtTimestamp uint64 `protobuf:"varint,7,opt,name=created_at_timestamp,json=createdAtTimestamp,proto3" json:"created_at_timestamp,omitempty"`
	UpdatedAtTimestamp uint64 `protobuf:"varint,8,opt,name=updated_at_timestamp,json=updatedAtTimestamp,proto3" json:"updated_at_timestamp,omitempty"`
	CreatedAtBlock     uint64 `protobuf:"varint,9,opt,name=created_at_block,json=createdAtBlock,proto3" json:"created_at_block,omitempty"`
	UpdatedAtBlock     uint64 `protobuf:"varint,10,opt,name=updated_at_block,json=updatedAtBlock,proto3" json:"updated_at_block,omitempty"`
}

func (x *WearableOnchainData) Reset() {
	*x = WearableOnchainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableOnchainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableOnchainData) ProtoMessage() {}

func (x *WearableOnchainData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableOnchainData.ProtoReflect.Descriptor instead.
func (*WearableOnchainData) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{2}
}

func (x *WearableOnchainData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WearableOnchainData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WearableOnchainData) GetMaxSupply() uint64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *WearableOnchainData) GetCurrentSupply() uint64 {
	if x != nil {
		return x.CurrentSupply
	}
	return 0
}

func (x *WearableOnchainData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WearableOnchainData) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *WearableOnchainData) GetCreatedAtTimestamp() uint64 {
	if x != nil {
		return x.CreatedAtTimestamp
	}
	return 0
}

func (x *WearableOnchainData) GetUpdatedAtTimestamp() uint64 {
	if x != nil {
		return x.UpdatedAtTimestamp
	}
	return 0
}

func (x *WearableOnchainData) GetCreatedAtBlock() uint64 {
	if x != nil {
		return x.CreatedAtBlock
	}
	return 0
}

func (x *WearableOnchainData) GetUpdatedAtBlock() uint64 {
	if x != nil {
		return x.UpdatedAtBlock
	}
	return 0
}

type WearableActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OnChainData  uint64 `protobuf:"varint,2,opt,name=on_chain_data,json=onChainData,proto3" json:"on_chain_data,omitempty"`
	ActivityType string `protobuf:"bytes,3,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	TimeStamp    uint64 `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	BlockNumber  uint64 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Txhash       string `protobuf:"bytes,6,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Amount       uint64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Price        uint64 `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	From         string `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`
	To           string `protobuf:"bytes,10,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *WearableActivity) Reset() {
	*x = WearableActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableActivity) ProtoMessage() {}

func (x *WearableActivity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableActivity.ProtoReflect.Descriptor instead.
func (*WearableActivity) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{3}
}

func (x *WearableActivity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WearableActivity) GetOnChainData() uint64 {
	if x != nil {
		return x.OnChainData
	}
	return 0
}

func (x *WearableActivity) GetActivityType() string {
	if x != nil {
		return x.ActivityType
	}
	return ""
}

func (x *WearableActivity) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *WearableActivity) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *WearableActivity) GetTxhash() string {
	if x != nil {
		return x.Txhash
	}
	return ""
}

func (x *WearableActivity) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WearableActivity) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WearableActivity) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *WearableActivity) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type WearableListingOrOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OnChainId   uint64  `protobuf:"varint,2,opt,name=on_chain_id,json=onChainId,proto3" json:"on_chain_id,omitempty"`
	FromAccount string  `protobuf:"bytes,3,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	Price       float32 `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	Amount      uint64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	TimeStamp   uint64  `protobuf:"varint,6,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	BlockNumber uint64  `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Txhash      string  `protobuf:"bytes,8,opt,name=txhash,proto3" json:"txhash,omitempty"`
}

func (x *WearableListingOrOffer) Reset() {
	*x = WearableListingOrOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableListingOrOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableListingOrOffer) ProtoMessage() {}

func (x *WearableListingOrOffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableListingOrOffer.ProtoReflect.Descriptor instead.
func (*WearableListingOrOffer) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{4}
}

func (x *WearableListingOrOffer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WearableListingOrOffer) GetOnChainId() uint64 {
	if x != nil {
		return x.OnChainId
	}
	return 0
}

func (x *WearableListingOrOffer) GetFromAccount() string {
	if x != nil {
		return x.FromAccount
	}
	return ""
}

func (x *WearableListingOrOffer) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WearableListingOrOffer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WearableListingOrOffer) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *WearableListingOrOffer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *WearableListingOrOffer) GetTxhash() string {
	if x != nil {
		return x.Txhash
	}
	return ""
}

type WearablesInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableId         string         `protobuf:"bytes,1,opt,name=wearable_id,json=wearableId,proto3" json:"wearable_id,omitempty"`
	Type               string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name               string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Gender             string         `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Rarity             string         `protobuf:"bytes,5,opt,name=rarity,proto3" json:"rarity,omitempty"`
	Changeable         bool           `protobuf:"varint,6,opt,name=changeable,proto3" json:"changeable,omitempty"`
	IsOrigin           bool           `protobuf:"varint,7,opt,name=is_origin,json=isOrigin,proto3" json:"is_origin,omitempty"`
	IsRequired         bool           `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Images             string         `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Stats              *WearableStats `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	MaxSupply          uint64         `protobuf:"varint,11,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	CurrentSupply      uint64         `protobuf:"varint,12,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply,omitempty"`
	CreatedAtTimestamp uint64         `protobuf:"varint,13,opt,name=created_at_timestamp,json=createdAtTimestamp,proto3" json:"created_at_timestamp,omitempty"`
	UpdatedAtTimestamp uint64         `protobuf:"varint,14,opt,name=updated_at_timestamp,json=updatedAtTimestamp,proto3" json:"updated_at_timestamp,omitempty"`
	CreatedAtBlock     uint64         `protobuf:"varint,15,opt,name=created_at_block,json=createdAtBlock,proto3" json:"created_at_block,omitempty"`
	UpdateAtBlock      uint64         `protobuf:"varint,16,opt,name=update_at_block,json=updateAtBlock,proto3" json:"update_at_block,omitempty"`
	OnChainId          uint64         `protobuf:"varint,17,opt,name=on_chain_id,json=onChainId,proto3" json:"on_chain_id,omitempty"`
}

func (x *WearablesInformation) Reset() {
	*x = WearablesInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearablesInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearablesInformation) ProtoMessage() {}

func (x *WearablesInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearablesInformation.ProtoReflect.Descriptor instead.
func (*WearablesInformation) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{5}
}

func (x *WearablesInformation) GetWearableId() string {
	if x != nil {
		return x.WearableId
	}
	return ""
}

func (x *WearablesInformation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WearablesInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WearablesInformation) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *WearablesInformation) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *WearablesInformation) GetChangeable() bool {
	if x != nil {
		return x.Changeable
	}
	return false
}

func (x *WearablesInformation) GetIsOrigin() bool {
	if x != nil {
		return x.IsOrigin
	}
	return false
}

func (x *WearablesInformation) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *WearablesInformation) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *WearablesInformation) GetStats() *WearableStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *WearablesInformation) GetMaxSupply() uint64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *WearablesInformation) GetCurrentSupply() uint64 {
	if x != nil {
		return x.CurrentSupply
	}
	return 0
}

func (x *WearablesInformation) GetCreatedAtTimestamp() uint64 {
	if x != nil {
		return x.CreatedAtTimestamp
	}
	return 0
}

func (x *WearablesInformation) GetUpdatedAtTimestamp() uint64 {
	if x != nil {
		return x.UpdatedAtTimestamp
	}
	return 0
}

func (x *WearablesInformation) GetCreatedAtBlock() uint64 {
	if x != nil {
		return x.CreatedAtBlock
	}
	return 0
}

func (x *WearablesInformation) GetUpdateAtBlock() uint64 {
	if x != nil {
		return x.UpdateAtBlock
	}
	return 0
}

func (x *WearablesInformation) GetOnChainId() uint64 {
	if x != nil {
		return x.OnChainId
	}
	return 0
}

type GetWearablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWearablesRequest) Reset() {
	*x = GetWearablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesRequest) ProtoMessage() {}

func (x *GetWearablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesRequest.ProtoReflect.Descriptor instead.
func (*GetWearablesRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{6}
}

func (x *GetWearablesRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetWearablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wearables *Wearables `protobuf:"bytes,1,opt,name=wearables,proto3" json:"wearables,omitempty"`
}

func (x *GetWearablesResponse) Reset() {
	*x = GetWearablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesResponse) ProtoMessage() {}

func (x *GetWearablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesResponse.ProtoReflect.Descriptor instead.
func (*GetWearablesResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{7}
}

func (x *GetWearablesResponse) GetWearables() *Wearables {
	if x != nil {
		return x.Wearables
	}
	return nil
}

type GetListWearablesActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetListWearablesActivityRequest) Reset() {
	*x = GetListWearablesActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesActivityRequest) ProtoMessage() {}

func (x *GetListWearablesActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesActivityRequest.ProtoReflect.Descriptor instead.
func (*GetListWearablesActivityRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{8}
}

func (x *GetListWearablesActivityRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetListWearablesActivityRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetListWearablesActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableActivity []*WearableActivity `protobuf:"bytes,1,rep,name=wearable_activity,json=wearableActivity,proto3" json:"wearable_activity,omitempty"`
	Count            uint64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListWearablesActivityResponse) Reset() {
	*x = GetListWearablesActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesActivityResponse) ProtoMessage() {}

func (x *GetListWearablesActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesActivityResponse.ProtoReflect.Descriptor instead.
func (*GetListWearablesActivityResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{9}
}

func (x *GetListWearablesActivityResponse) GetWearableActivity() []*WearableActivity {
	if x != nil {
		return x.WearableActivity
	}
	return nil
}

func (x *GetListWearablesActivityResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetWearablesListingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWearablesListingRequest) Reset() {
	*x = GetWearablesListingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesListingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesListingRequest) ProtoMessage() {}

func (x *GetWearablesListingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesListingRequest.ProtoReflect.Descriptor instead.
func (*GetWearablesListingRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{10}
}

func (x *GetWearablesListingRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetWearablesListingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableListing *WearableListingOrOffer `protobuf:"bytes,1,opt,name=wearable_listing,json=wearableListing,proto3" json:"wearable_listing,omitempty"`
}

func (x *GetWearablesListingResponse) Reset() {
	*x = GetWearablesListingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesListingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesListingResponse) ProtoMessage() {}

func (x *GetWearablesListingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesListingResponse.ProtoReflect.Descriptor instead.
func (*GetWearablesListingResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{11}
}

func (x *GetWearablesListingResponse) GetWearableListing() *WearableListingOrOffer {
	if x != nil {
		return x.WearableListing
	}
	return nil
}

type GetWearablesOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWearablesOfferRequest) Reset() {
	*x = GetWearablesOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesOfferRequest) ProtoMessage() {}

func (x *GetWearablesOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesOfferRequest.ProtoReflect.Descriptor instead.
func (*GetWearablesOfferRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{12}
}

func (x *GetWearablesOfferRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetWearablesOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableOffer *WearableListingOrOffer `protobuf:"bytes,1,opt,name=wearable_offer,json=wearableOffer,proto3" json:"wearable_offer,omitempty"`
}

func (x *GetWearablesOfferResponse) Reset() {
	*x = GetWearablesOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesOfferResponse) ProtoMessage() {}

func (x *GetWearablesOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesOfferResponse.ProtoReflect.Descriptor instead.
func (*GetWearablesOfferResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{13}
}

func (x *GetWearablesOfferResponse) GetWearableOffer() *WearableListingOrOffer {
	if x != nil {
		return x.WearableOffer
	}
	return nil
}

type GetListWearablesListingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetListWearablesListingRequest) Reset() {
	*x = GetListWearablesListingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesListingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesListingRequest) ProtoMessage() {}

func (x *GetListWearablesListingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesListingRequest.ProtoReflect.Descriptor instead.
func (*GetListWearablesListingRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{14}
}

func (x *GetListWearablesListingRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetListWearablesListingRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetListWearablesListingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearablesListing []*WearableListingOrOffer `protobuf:"bytes,1,rep,name=wearables_listing,json=wearablesListing,proto3" json:"wearables_listing,omitempty"`
	Count            uint64                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListWearablesListingResponse) Reset() {
	*x = GetListWearablesListingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesListingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesListingResponse) ProtoMessage() {}

func (x *GetListWearablesListingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesListingResponse.ProtoReflect.Descriptor instead.
func (*GetListWearablesListingResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{15}
}

func (x *GetListWearablesListingResponse) GetWearablesListing() []*WearableListingOrOffer {
	if x != nil {
		return x.WearablesListing
	}
	return nil
}

func (x *GetListWearablesListingResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetListWearablesOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetListWearablesOfferRequest) Reset() {
	*x = GetListWearablesOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesOfferRequest) ProtoMessage() {}

func (x *GetListWearablesOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesOfferRequest.ProtoReflect.Descriptor instead.
func (*GetListWearablesOfferRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{16}
}

func (x *GetListWearablesOfferRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetListWearablesOfferRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetListWearablesOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearablesOffer []*WearableListingOrOffer `protobuf:"bytes,1,rep,name=wearables_offer,json=wearablesOffer,proto3" json:"wearables_offer,omitempty"`
	Count          uint64                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListWearablesOfferResponse) Reset() {
	*x = GetListWearablesOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesOfferResponse) ProtoMessage() {}

func (x *GetListWearablesOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesOfferResponse.ProtoReflect.Descriptor instead.
func (*GetListWearablesOfferResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{17}
}

func (x *GetListWearablesOfferResponse) GetWearablesOffer() []*WearableListingOrOffer {
	if x != nil {
		return x.WearablesOffer
	}
	return nil
}

func (x *GetListWearablesOfferResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetListWearablesInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort   string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Rarity string   `protobuf:"bytes,4,opt,name=rarity,proto3" json:"rarity,omitempty"`
	Gender []string `protobuf:"bytes,5,rep,name=gender,proto3" json:"gender,omitempty"`
	Type   string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetListWearablesInformationRequest) Reset() {
	*x = GetListWearablesInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesInformationRequest) ProtoMessage() {}

func (x *GetListWearablesInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesInformationRequest.ProtoReflect.Descriptor instead.
func (*GetListWearablesInformationRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{18}
}

func (x *GetListWearablesInformationRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetListWearablesInformationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListWearablesInformationRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetListWearablesInformationRequest) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *GetListWearablesInformationRequest) GetGender() []string {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *GetListWearablesInformationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetWearablesInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWearablesInformationRequest) Reset() {
	*x = GetWearablesInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesInformationRequest) ProtoMessage() {}

func (x *GetWearablesInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesInformationRequest.ProtoReflect.Descriptor instead.
func (*GetWearablesInformationRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{19}
}

func (x *GetWearablesInformationRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetWearablesInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableInformation *WearablesInformation `protobuf:"bytes,1,opt,name=wearable_information,json=wearableInformation,proto3" json:"wearable_information,omitempty"`
}

func (x *GetWearablesInformationResponse) Reset() {
	*x = GetWearablesInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearablesInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearablesInformationResponse) ProtoMessage() {}

func (x *GetWearablesInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearablesInformationResponse.ProtoReflect.Descriptor instead.
func (*GetWearablesInformationResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{20}
}

func (x *GetWearablesInformationResponse) GetWearableInformation() *WearablesInformation {
	if x != nil {
		return x.WearableInformation
	}
	return nil
}

type GetListWearablesInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableInformation []*WearablesInformation `protobuf:"bytes,1,rep,name=wearable_information,json=wearableInformation,proto3" json:"wearable_information,omitempty"`
	Count               uint64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListWearablesInformationResponse) Reset() {
	*x = GetListWearablesInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesInformationResponse) ProtoMessage() {}

func (x *GetListWearablesInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesInformationResponse.ProtoReflect.Descriptor instead.
func (*GetListWearablesInformationResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{21}
}

func (x *GetListWearablesInformationResponse) GetWearableInformation() []*WearablesInformation {
	if x != nil {
		return x.WearableInformation
	}
	return nil
}

func (x *GetListWearablesInformationResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetListWearablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   *wrapperspb.StringValue        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Sort      string                         `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Offset    int32                          `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32                          `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Id        *wrapperspb.UInt64Value        `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Gender    []string                       `protobuf:"bytes,6,rep,name=gender,proto3" json:"gender,omitempty"`
	Status    []string                       `protobuf:"bytes,7,rep,name=status,proto3" json:"status,omitempty"`
	Rarity    string                         `protobuf:"bytes,8,opt,name=rarity,proto3" json:"rarity,omitempty"`
	Type      string                         `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Stat      map[string]*structpb.ListValue `protobuf:"bytes,10,rep,name=stat,proto3" json:"stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OnChainId *wrapperspb.UInt64Value        `protobuf:"bytes,11,opt,name=on_chain_id,json=onChainId,proto3" json:"on_chain_id,omitempty"`
}

func (x *GetListWearablesRequest) Reset() {
	*x = GetListWearablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesRequest) ProtoMessage() {}

func (x *GetListWearablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesRequest.ProtoReflect.Descriptor instead.
func (*GetListWearablesRequest) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{22}
}

func (x *GetListWearablesRequest) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetListWearablesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetListWearablesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetListWearablesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetListWearablesRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetListWearablesRequest) GetGender() []string {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *GetListWearablesRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetListWearablesRequest) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *GetListWearablesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetListWearablesRequest) GetStat() map[string]*structpb.ListValue {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *GetListWearablesRequest) GetOnChainId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.OnChainId
	}
	return nil
}

type GetListWearablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wearables []*Wearables `protobuf:"bytes,1,rep,name=wearables,proto3" json:"wearables,omitempty"`
	Count     uint64       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetListWearablesResponse) Reset() {
	*x = GetListWearablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wearables_v1_wearables_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListWearablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListWearablesResponse) ProtoMessage() {}

func (x *GetListWearablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wearables_v1_wearables_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListWearablesResponse.ProtoReflect.Descriptor instead.
func (*GetListWearablesResponse) Descriptor() ([]byte, []int) {
	return file_proto_wearables_v1_wearables_proto_rawDescGZIP(), []int{23}
}

func (x *GetListWearablesResponse) GetWearables() []*Wearables {
	if x != nil {
		return x.Wearables
	}
	return nil
}

func (x *GetListWearablesResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proto_wearables_v1_wearables_proto protoreflect.FileDescriptor

var file_proto_wearables_v1_wearables_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01,
	0x0a, 0x0d, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x22, 0xe1, 0x02,
	0x0a, 0x09, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x18, 0x32, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x74, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x10, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0d, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x10, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x28, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0e, 0x77, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8a, 0x04, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18,
	0x32, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x71, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xfa, 0x42, 0x5a, 0x72, 0x58, 0x52,
	0x00, 0x52, 0x15, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xfa,
	0x42, 0x35, 0x72, 0x33, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x08, 0x75, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x61, 0x72, 0x65, 0x52, 0x04, 0x65, 0x70,
	0x69, 0x63, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x79, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x30, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x18, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e, 0x52, 0x04, 0x6d, 0x61, 0x6c,
	0x65, 0x52, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0xaa, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x95, 0x01, 0xfa, 0x42, 0x91, 0x01, 0x72, 0x8e, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x68, 0x61, 0x69, 0x72, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x10, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x05, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x61, 0x74, 0x52, 0x13, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03,
	0x70, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x14, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x83, 0x07, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x13, 0x5e, 0x30, 0x78, 0x5b, 0x61, 0x2d, 0x66, 0x41, 0x2d,
	0x46, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x34, 0x30, 0x7d, 0x24, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0xfa, 0x42, 0x38, 0x72, 0x36, 0x52, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x32, 0x28, 0x00, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x92, 0x01, 0x12, 0x22, 0x10, 0x72, 0x0e,
	0x52, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x92, 0x01, 0x1a, 0x22, 0x18,
	0x72, 0x16, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x50, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0xfa, 0x42, 0x35, 0x72, 0x33, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x08, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x61, 0x72, 0x65, 0x52,
	0x04, 0x65, 0x70, 0x69, 0x63, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x79, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x95, 0x01, 0xfa, 0x42, 0x91, 0x01, 0x72, 0x8e, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x52, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x10, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x61, 0x74, 0x52, 0x13,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x03, 0x70, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x55, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x9a, 0x01, 0x04, 0x08, 0x00, 0x10, 0x05,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x1a, 0x53, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xec, 0x0b, 0x0a, 0x10, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x99, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x67, 0x61, 0x6c, 0x61, 0x78,
	0x79, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_wearables_v1_wearables_proto_rawDescOnce sync.Once
	file_proto_wearables_v1_wearables_proto_rawDescData = file_proto_wearables_v1_wearables_proto_rawDesc
)

func file_proto_wearables_v1_wearables_proto_rawDescGZIP() []byte {
	file_proto_wearables_v1_wearables_proto_rawDescOnce.Do(func() {
		file_proto_wearables_v1_wearables_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_wearables_v1_wearables_proto_rawDescData)
	})
	return file_proto_wearables_v1_wearables_proto_rawDescData
}

var file_proto_wearables_v1_wearables_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_wearables_v1_wearables_proto_goTypes = []interface{}{
	(*WearableStats)(nil),                       // 0: proto.wearables.v1.WearableStats
	(*Wearables)(nil),                           // 1: proto.wearables.v1.Wearables
	(*WearableOnchainData)(nil),                 // 2: proto.wearables.v1.WearableOnchainData
	(*WearableActivity)(nil),                    // 3: proto.wearables.v1.WearableActivity
	(*WearableListingOrOffer)(nil),              // 4: proto.wearables.v1.WearableListingOrOffer
	(*WearablesInformation)(nil),                // 5: proto.wearables.v1.WearablesInformation
	(*GetWearablesRequest)(nil),                 // 6: proto.wearables.v1.GetWearablesRequest
	(*GetWearablesResponse)(nil),                // 7: proto.wearables.v1.GetWearablesResponse
	(*GetListWearablesActivityRequest)(nil),     // 8: proto.wearables.v1.GetListWearablesActivityRequest
	(*GetListWearablesActivityResponse)(nil),    // 9: proto.wearables.v1.GetListWearablesActivityResponse
	(*GetWearablesListingRequest)(nil),          // 10: proto.wearables.v1.GetWearablesListingRequest
	(*GetWearablesListingResponse)(nil),         // 11: proto.wearables.v1.GetWearablesListingResponse
	(*GetWearablesOfferRequest)(nil),            // 12: proto.wearables.v1.GetWearablesOfferRequest
	(*GetWearablesOfferResponse)(nil),           // 13: proto.wearables.v1.GetWearablesOfferResponse
	(*GetListWearablesListingRequest)(nil),      // 14: proto.wearables.v1.GetListWearablesListingRequest
	(*GetListWearablesListingResponse)(nil),     // 15: proto.wearables.v1.GetListWearablesListingResponse
	(*GetListWearablesOfferRequest)(nil),        // 16: proto.wearables.v1.GetListWearablesOfferRequest
	(*GetListWearablesOfferResponse)(nil),       // 17: proto.wearables.v1.GetListWearablesOfferResponse
	(*GetListWearablesInformationRequest)(nil),  // 18: proto.wearables.v1.GetListWearablesInformationRequest
	(*GetWearablesInformationRequest)(nil),      // 19: proto.wearables.v1.GetWearablesInformationRequest
	(*GetWearablesInformationResponse)(nil),     // 20: proto.wearables.v1.GetWearablesInformationResponse
	(*GetListWearablesInformationResponse)(nil), // 21: proto.wearables.v1.GetListWearablesInformationResponse
	(*GetListWearablesRequest)(nil),             // 22: proto.wearables.v1.GetListWearablesRequest
	(*GetListWearablesResponse)(nil),            // 23: proto.wearables.v1.GetListWearablesResponse
	nil,                                         // 24: proto.wearables.v1.GetListWearablesRequest.StatEntry
	(*wrapperspb.UInt64Value)(nil),              // 25: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),              // 26: google.protobuf.StringValue
	(*structpb.ListValue)(nil),                  // 27: google.protobuf.ListValue
}
var file_proto_wearables_v1_wearables_proto_depIdxs = []int32{
	0,  // 0: proto.wearables.v1.Wearables.stats:type_name -> proto.wearables.v1.WearableStats
	0,  // 1: proto.wearables.v1.WearablesInformation.stats:type_name -> proto.wearables.v1.WearableStats
	25, // 2: proto.wearables.v1.GetWearablesRequest.id:type_name -> google.protobuf.UInt64Value
	1,  // 3: proto.wearables.v1.GetWearablesResponse.wearables:type_name -> proto.wearables.v1.Wearables
	3,  // 4: proto.wearables.v1.GetListWearablesActivityResponse.wearable_activity:type_name -> proto.wearables.v1.WearableActivity
	25, // 5: proto.wearables.v1.GetWearablesListingRequest.id:type_name -> google.protobuf.UInt64Value
	4,  // 6: proto.wearables.v1.GetWearablesListingResponse.wearable_listing:type_name -> proto.wearables.v1.WearableListingOrOffer
	25, // 7: proto.wearables.v1.GetWearablesOfferRequest.id:type_name -> google.protobuf.UInt64Value
	4,  // 8: proto.wearables.v1.GetWearablesOfferResponse.wearable_offer:type_name -> proto.wearables.v1.WearableListingOrOffer
	4,  // 9: proto.wearables.v1.GetListWearablesListingResponse.wearables_listing:type_name -> proto.wearables.v1.WearableListingOrOffer
	4,  // 10: proto.wearables.v1.GetListWearablesOfferResponse.wearables_offer:type_name -> proto.wearables.v1.WearableListingOrOffer
	25, // 11: proto.wearables.v1.GetWearablesInformationRequest.id:type_name -> google.protobuf.UInt64Value
	5,  // 12: proto.wearables.v1.GetWearablesInformationResponse.wearable_information:type_name -> proto.wearables.v1.WearablesInformation
	5,  // 13: proto.wearables.v1.GetListWearablesInformationResponse.wearable_information:type_name -> proto.wearables.v1.WearablesInformation
	26, // 14: proto.wearables.v1.GetListWearablesRequest.account:type_name -> google.protobuf.StringValue
	25, // 15: proto.wearables.v1.GetListWearablesRequest.id:type_name -> google.protobuf.UInt64Value
	24, // 16: proto.wearables.v1.GetListWearablesRequest.stat:type_name -> proto.wearables.v1.GetListWearablesRequest.StatEntry
	25, // 17: proto.wearables.v1.GetListWearablesRequest.on_chain_id:type_name -> google.protobuf.UInt64Value
	1,  // 18: proto.wearables.v1.GetListWearablesResponse.wearables:type_name -> proto.wearables.v1.Wearables
	27, // 19: proto.wearables.v1.GetListWearablesRequest.StatEntry.value:type_name -> google.protobuf.ListValue
	6,  // 20: proto.wearables.v1.WearablesService.GetWearables:input_type -> proto.wearables.v1.GetWearablesRequest
	22, // 21: proto.wearables.v1.WearablesService.GetListWearables:input_type -> proto.wearables.v1.GetListWearablesRequest
	8,  // 22: proto.wearables.v1.WearablesService.GetListWearablesActivity:input_type -> proto.wearables.v1.GetListWearablesActivityRequest
	10, // 23: proto.wearables.v1.WearablesService.GetWearablesListing:input_type -> proto.wearables.v1.GetWearablesListingRequest
	12, // 24: proto.wearables.v1.WearablesService.GetWearablesOffer:input_type -> proto.wearables.v1.GetWearablesOfferRequest
	14, // 25: proto.wearables.v1.WearablesService.GetListWearablesListing:input_type -> proto.wearables.v1.GetListWearablesListingRequest
	16, // 26: proto.wearables.v1.WearablesService.GetListWearablesOffer:input_type -> proto.wearables.v1.GetListWearablesOfferRequest
	18, // 27: proto.wearables.v1.WearablesService.GetListWearablesInformation:input_type -> proto.wearables.v1.GetListWearablesInformationRequest
	19, // 28: proto.wearables.v1.WearablesService.GetWearablesInformation:input_type -> proto.wearables.v1.GetWearablesInformationRequest
	7,  // 29: proto.wearables.v1.WearablesService.GetWearables:output_type -> proto.wearables.v1.GetWearablesResponse
	23, // 30: proto.wearables.v1.WearablesService.GetListWearables:output_type -> proto.wearables.v1.GetListWearablesResponse
	9,  // 31: proto.wearables.v1.WearablesService.GetListWearablesActivity:output_type -> proto.wearables.v1.GetListWearablesActivityResponse
	11, // 32: proto.wearables.v1.WearablesService.GetWearablesListing:output_type -> proto.wearables.v1.GetWearablesListingResponse
	13, // 33: proto.wearables.v1.WearablesService.GetWearablesOffer:output_type -> proto.wearables.v1.GetWearablesOfferResponse
	15, // 34: proto.wearables.v1.WearablesService.GetListWearablesListing:output_type -> proto.wearables.v1.GetListWearablesListingResponse
	17, // 35: proto.wearables.v1.WearablesService.GetListWearablesOffer:output_type -> proto.wearables.v1.GetListWearablesOfferResponse
	21, // 36: proto.wearables.v1.WearablesService.GetListWearablesInformation:output_type -> proto.wearables.v1.GetListWearablesInformationResponse
	20, // 37: proto.wearables.v1.WearablesService.GetWearablesInformation:output_type -> proto.wearables.v1.GetWearablesInformationResponse
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_wearables_v1_wearables_proto_init() }
func file_proto_wearables_v1_wearables_proto_init() {
	if File_proto_wearables_v1_wearables_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_wearables_v1_wearables_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wearables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearableOnchainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearableActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearableListingOrOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WearablesInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesListingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesListingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesListingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesListingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWearablesInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wearables_v1_wearables_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListWearablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_wearables_v1_wearables_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_wearables_v1_wearables_proto_goTypes,
		DependencyIndexes: file_proto_wearables_v1_wearables_proto_depIdxs,
		MessageInfos:      file_proto_wearables_v1_wearables_proto_msgTypes,
	}.Build()
	File_proto_wearables_v1_wearables_proto = out.File
	file_proto_wearables_v1_wearables_proto_rawDesc = nil
	file_proto_wearables_v1_wearables_proto_goTypes = nil
	file_proto_wearables_v1_wearables_proto_depIdxs = nil
}
