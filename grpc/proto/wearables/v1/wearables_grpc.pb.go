// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/wearables/v1/wearables.proto

package wearables

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WearablesServiceClient is the client API for WearablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearablesServiceClient interface {
	GetWearables(ctx context.Context, in *GetWearablesRequest, opts ...grpc.CallOption) (*GetWearablesResponse, error)
	GetListWearables(ctx context.Context, in *GetListWearablesRequest, opts ...grpc.CallOption) (*GetListWearablesResponse, error)
	GetListWearablesActivity(ctx context.Context, in *GetListWearablesActivityRequest, opts ...grpc.CallOption) (*GetListWearablesActivityResponse, error)
	GetWearablesListing(ctx context.Context, in *GetWearablesListingRequest, opts ...grpc.CallOption) (*GetWearablesListingResponse, error)
	GetWearablesOffer(ctx context.Context, in *GetWearablesOfferRequest, opts ...grpc.CallOption) (*GetWearablesOfferResponse, error)
	GetListWearablesListing(ctx context.Context, in *GetListWearablesListingRequest, opts ...grpc.CallOption) (*GetListWearablesListingResponse, error)
	GetListWearablesOffer(ctx context.Context, in *GetListWearablesOfferRequest, opts ...grpc.CallOption) (*GetListWearablesOfferResponse, error)
	GetListWearablesInformation(ctx context.Context, in *GetListWearablesInformationRequest, opts ...grpc.CallOption) (*GetListWearablesInformationResponse, error)
	GetWearablesInformation(ctx context.Context, in *GetWearablesInformationRequest, opts ...grpc.CallOption) (*GetWearablesInformationResponse, error)
}

type wearablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearablesServiceClient(cc grpc.ClientConnInterface) WearablesServiceClient {
	return &wearablesServiceClient{cc}
}

func (c *wearablesServiceClient) GetWearables(ctx context.Context, in *GetWearablesRequest, opts ...grpc.CallOption) (*GetWearablesResponse, error) {
	out := new(GetWearablesResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetWearables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetListWearables(ctx context.Context, in *GetListWearablesRequest, opts ...grpc.CallOption) (*GetListWearablesResponse, error) {
	out := new(GetListWearablesResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetListWearables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetListWearablesActivity(ctx context.Context, in *GetListWearablesActivityRequest, opts ...grpc.CallOption) (*GetListWearablesActivityResponse, error) {
	out := new(GetListWearablesActivityResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetListWearablesActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetWearablesListing(ctx context.Context, in *GetWearablesListingRequest, opts ...grpc.CallOption) (*GetWearablesListingResponse, error) {
	out := new(GetWearablesListingResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetWearablesListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetWearablesOffer(ctx context.Context, in *GetWearablesOfferRequest, opts ...grpc.CallOption) (*GetWearablesOfferResponse, error) {
	out := new(GetWearablesOfferResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetWearablesOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetListWearablesListing(ctx context.Context, in *GetListWearablesListingRequest, opts ...grpc.CallOption) (*GetListWearablesListingResponse, error) {
	out := new(GetListWearablesListingResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetListWearablesListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetListWearablesOffer(ctx context.Context, in *GetListWearablesOfferRequest, opts ...grpc.CallOption) (*GetListWearablesOfferResponse, error) {
	out := new(GetListWearablesOfferResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetListWearablesOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetListWearablesInformation(ctx context.Context, in *GetListWearablesInformationRequest, opts ...grpc.CallOption) (*GetListWearablesInformationResponse, error) {
	out := new(GetListWearablesInformationResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetListWearablesInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearablesServiceClient) GetWearablesInformation(ctx context.Context, in *GetWearablesInformationRequest, opts ...grpc.CallOption) (*GetWearablesInformationResponse, error) {
	out := new(GetWearablesInformationResponse)
	err := c.cc.Invoke(ctx, "/proto.wearables.v1.WearablesService/GetWearablesInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearablesServiceServer is the server API for WearablesService service.
// All implementations should embed UnimplementedWearablesServiceServer
// for forward compatibility
type WearablesServiceServer interface {
	GetWearables(context.Context, *GetWearablesRequest) (*GetWearablesResponse, error)
	GetListWearables(context.Context, *GetListWearablesRequest) (*GetListWearablesResponse, error)
	GetListWearablesActivity(context.Context, *GetListWearablesActivityRequest) (*GetListWearablesActivityResponse, error)
	GetWearablesListing(context.Context, *GetWearablesListingRequest) (*GetWearablesListingResponse, error)
	GetWearablesOffer(context.Context, *GetWearablesOfferRequest) (*GetWearablesOfferResponse, error)
	GetListWearablesListing(context.Context, *GetListWearablesListingRequest) (*GetListWearablesListingResponse, error)
	GetListWearablesOffer(context.Context, *GetListWearablesOfferRequest) (*GetListWearablesOfferResponse, error)
	GetListWearablesInformation(context.Context, *GetListWearablesInformationRequest) (*GetListWearablesInformationResponse, error)
	GetWearablesInformation(context.Context, *GetWearablesInformationRequest) (*GetWearablesInformationResponse, error)
}

// UnimplementedWearablesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWearablesServiceServer struct {
}

func (UnimplementedWearablesServiceServer) GetWearables(context.Context, *GetWearablesRequest) (*GetWearablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearables not implemented")
}
func (UnimplementedWearablesServiceServer) GetListWearables(context.Context, *GetListWearablesRequest) (*GetListWearablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListWearables not implemented")
}
func (UnimplementedWearablesServiceServer) GetListWearablesActivity(context.Context, *GetListWearablesActivityRequest) (*GetListWearablesActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListWearablesActivity not implemented")
}
func (UnimplementedWearablesServiceServer) GetWearablesListing(context.Context, *GetWearablesListingRequest) (*GetWearablesListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearablesListing not implemented")
}
func (UnimplementedWearablesServiceServer) GetWearablesOffer(context.Context, *GetWearablesOfferRequest) (*GetWearablesOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearablesOffer not implemented")
}
func (UnimplementedWearablesServiceServer) GetListWearablesListing(context.Context, *GetListWearablesListingRequest) (*GetListWearablesListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListWearablesListing not implemented")
}
func (UnimplementedWearablesServiceServer) GetListWearablesOffer(context.Context, *GetListWearablesOfferRequest) (*GetListWearablesOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListWearablesOffer not implemented")
}
func (UnimplementedWearablesServiceServer) GetListWearablesInformation(context.Context, *GetListWearablesInformationRequest) (*GetListWearablesInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListWearablesInformation not implemented")
}
func (UnimplementedWearablesServiceServer) GetWearablesInformation(context.Context, *GetWearablesInformationRequest) (*GetWearablesInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearablesInformation not implemented")
}

// UnsafeWearablesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearablesServiceServer will
// result in compilation errors.
type UnsafeWearablesServiceServer interface {
	mustEmbedUnimplementedWearablesServiceServer()
}

func RegisterWearablesServiceServer(s grpc.ServiceRegistrar, srv WearablesServiceServer) {
	s.RegisterService(&WearablesService_ServiceDesc, srv)
}

func _WearablesService_GetWearables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetWearables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetWearables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetWearables(ctx, req.(*GetWearablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetListWearables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWearablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetListWearables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetListWearables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetListWearables(ctx, req.(*GetListWearablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetListWearablesActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWearablesActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetListWearablesActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetListWearablesActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetListWearablesActivity(ctx, req.(*GetListWearablesActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetWearablesListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearablesListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetWearablesListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetWearablesListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetWearablesListing(ctx, req.(*GetWearablesListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetWearablesOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearablesOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetWearablesOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetWearablesOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetWearablesOffer(ctx, req.(*GetWearablesOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetListWearablesListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWearablesListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetListWearablesListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetListWearablesListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetListWearablesListing(ctx, req.(*GetListWearablesListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetListWearablesOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWearablesOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetListWearablesOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetListWearablesOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetListWearablesOffer(ctx, req.(*GetListWearablesOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetListWearablesInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListWearablesInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetListWearablesInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetListWearablesInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetListWearablesInformation(ctx, req.(*GetListWearablesInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearablesService_GetWearablesInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearablesInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearablesServiceServer).GetWearablesInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wearables.v1.WearablesService/GetWearablesInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearablesServiceServer).GetWearablesInformation(ctx, req.(*GetWearablesInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WearablesService_ServiceDesc is the grpc.ServiceDesc for WearablesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearablesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wearables.v1.WearablesService",
	HandlerType: (*WearablesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWearables",
			Handler:    _WearablesService_GetWearables_Handler,
		},
		{
			MethodName: "GetListWearables",
			Handler:    _WearablesService_GetListWearables_Handler,
		},
		{
			MethodName: "GetListWearablesActivity",
			Handler:    _WearablesService_GetListWearablesActivity_Handler,
		},
		{
			MethodName: "GetWearablesListing",
			Handler:    _WearablesService_GetWearablesListing_Handler,
		},
		{
			MethodName: "GetWearablesOffer",
			Handler:    _WearablesService_GetWearablesOffer_Handler,
		},
		{
			MethodName: "GetListWearablesListing",
			Handler:    _WearablesService_GetListWearablesListing_Handler,
		},
		{
			MethodName: "GetListWearablesOffer",
			Handler:    _WearablesService_GetListWearablesOffer_Handler,
		},
		{
			MethodName: "GetListWearablesInformation",
			Handler:    _WearablesService_GetListWearablesInformation_Handler,
		},
		{
			MethodName: "GetWearablesInformation",
			Handler:    _WearablesService_GetWearablesInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wearables/v1/wearables.proto",
}
