// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/metronion/v1/metronion.proto

package metronion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetronionServiceClient is the client API for MetronionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetronionServiceClient interface {
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	GetListMetadata(ctx context.Context, in *GetListMetadataRequest, opts ...grpc.CallOption) (*GetListMetadataResponse, error)
	GetMetronionActivities(ctx context.Context, in *GetMetronionActivitiesRequest, opts ...grpc.CallOption) (*GetMetronionActivitiesResponse, error)
	GetMetronionListing(ctx context.Context, in *GetMetronionListingRequest, opts ...grpc.CallOption) (*GetMetronionListingResponse, error)
	GetMetronionOffers(ctx context.Context, in *GetMetronionOffersRequest, opts ...grpc.CallOption) (*GetMetronionOffersResponse, error)
}

type metronionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetronionServiceClient(cc grpc.ClientConnInterface) MetronionServiceClient {
	return &metronionServiceClient{cc}
}

func (c *metronionServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.metronion.v1.MetronionService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metronionServiceClient) GetListMetadata(ctx context.Context, in *GetListMetadataRequest, opts ...grpc.CallOption) (*GetListMetadataResponse, error) {
	out := new(GetListMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.metronion.v1.MetronionService/GetListMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metronionServiceClient) GetMetronionActivities(ctx context.Context, in *GetMetronionActivitiesRequest, opts ...grpc.CallOption) (*GetMetronionActivitiesResponse, error) {
	out := new(GetMetronionActivitiesResponse)
	err := c.cc.Invoke(ctx, "/proto.metronion.v1.MetronionService/GetMetronionActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metronionServiceClient) GetMetronionListing(ctx context.Context, in *GetMetronionListingRequest, opts ...grpc.CallOption) (*GetMetronionListingResponse, error) {
	out := new(GetMetronionListingResponse)
	err := c.cc.Invoke(ctx, "/proto.metronion.v1.MetronionService/GetMetronionListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metronionServiceClient) GetMetronionOffers(ctx context.Context, in *GetMetronionOffersRequest, opts ...grpc.CallOption) (*GetMetronionOffersResponse, error) {
	out := new(GetMetronionOffersResponse)
	err := c.cc.Invoke(ctx, "/proto.metronion.v1.MetronionService/GetMetronionOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetronionServiceServer is the server API for MetronionService service.
// All implementations should embed UnimplementedMetronionServiceServer
// for forward compatibility
type MetronionServiceServer interface {
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	GetListMetadata(context.Context, *GetListMetadataRequest) (*GetListMetadataResponse, error)
	GetMetronionActivities(context.Context, *GetMetronionActivitiesRequest) (*GetMetronionActivitiesResponse, error)
	GetMetronionListing(context.Context, *GetMetronionListingRequest) (*GetMetronionListingResponse, error)
	GetMetronionOffers(context.Context, *GetMetronionOffersRequest) (*GetMetronionOffersResponse, error)
}

// UnimplementedMetronionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetronionServiceServer struct {
}

func (UnimplementedMetronionServiceServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedMetronionServiceServer) GetListMetadata(context.Context, *GetListMetadataRequest) (*GetListMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListMetadata not implemented")
}
func (UnimplementedMetronionServiceServer) GetMetronionActivities(context.Context, *GetMetronionActivitiesRequest) (*GetMetronionActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetronionActivities not implemented")
}
func (UnimplementedMetronionServiceServer) GetMetronionListing(context.Context, *GetMetronionListingRequest) (*GetMetronionListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetronionListing not implemented")
}
func (UnimplementedMetronionServiceServer) GetMetronionOffers(context.Context, *GetMetronionOffersRequest) (*GetMetronionOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetronionOffers not implemented")
}

// UnsafeMetronionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetronionServiceServer will
// result in compilation errors.
type UnsafeMetronionServiceServer interface {
	mustEmbedUnimplementedMetronionServiceServer()
}

func RegisterMetronionServiceServer(s grpc.ServiceRegistrar, srv MetronionServiceServer) {
	s.RegisterService(&MetronionService_ServiceDesc, srv)
}

func _MetronionService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetronionServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.metronion.v1.MetronionService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetronionServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetronionService_GetListMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetronionServiceServer).GetListMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.metronion.v1.MetronionService/GetListMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetronionServiceServer).GetListMetadata(ctx, req.(*GetListMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetronionService_GetMetronionActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetronionActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetronionServiceServer).GetMetronionActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.metronion.v1.MetronionService/GetMetronionActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetronionServiceServer).GetMetronionActivities(ctx, req.(*GetMetronionActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetronionService_GetMetronionListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetronionListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetronionServiceServer).GetMetronionListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.metronion.v1.MetronionService/GetMetronionListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetronionServiceServer).GetMetronionListing(ctx, req.(*GetMetronionListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetronionService_GetMetronionOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetronionOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetronionServiceServer).GetMetronionOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.metronion.v1.MetronionService/GetMetronionOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetronionServiceServer).GetMetronionOffers(ctx, req.(*GetMetronionOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetronionService_ServiceDesc is the grpc.ServiceDesc for MetronionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetronionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.metronion.v1.MetronionService",
	HandlerType: (*MetronionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _MetronionService_GetMetadata_Handler,
		},
		{
			MethodName: "GetListMetadata",
			Handler:    _MetronionService_GetListMetadata_Handler,
		},
		{
			MethodName: "GetMetronionActivities",
			Handler:    _MetronionService_GetMetronionActivities_Handler,
		},
		{
			MethodName: "GetMetronionListing",
			Handler:    _MetronionService_GetMetronionListing_Handler,
		},
		{
			MethodName: "GetMetronionOffers",
			Handler:    _MetronionService_GetMetronionOffers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metronion/v1/metronion.proto",
}
