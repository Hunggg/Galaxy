// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/metronion/v1/metronion.proto

package metronion

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MetronionStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetronionStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetronionStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetronionStatsMultiError,
// or nil if none found.
func (m *MetronionStats) ValidateAll() error {
	return m.validate(true)
}

func (m *MetronionStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Creativity

	// no validation rules for Charisma

	// no validation rules for Resolve

	// no validation rules for Fitness

	// no validation rules for Intellect

	if len(errors) > 0 {
		return MetronionStatsMultiError(errors)
	}

	return nil
}

// MetronionStatsMultiError is an error wrapping multiple validation errors
// returned by MetronionStats.ValidateAll() if the designated constraints
// aren't met.
type MetronionStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetronionStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetronionStatsMultiError) AllErrors() []error { return m }

// MetronionStatsValidationError is the validation error returned by
// MetronionStats.Validate if the designated constraints aren't met.
type MetronionStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetronionStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetronionStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetronionStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetronionStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetronionStatsValidationError) ErrorName() string { return "MetronionStatsValidationError" }

// Error satisfies the builtin error interface
func (e MetronionStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetronionStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetronionStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetronionStatsValidationError{}

// Validate checks the field values on Wearables with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Wearables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Wearables with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WearablesMultiError, or nil
// if none found.
func (m *Wearables) ValidateAll() error {
	return m.validate(true)
}

func (m *Wearables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Gender

	// no validation rules for Rarity

	// no validation rules for Changeable

	// no validation rules for IsOrigin

	// no validation rules for IsRequired

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WearablesValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WearablesValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WearablesValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WearablesMultiError(errors)
	}

	return nil
}

// WearablesMultiError is an error wrapping multiple validation errors returned
// by Wearables.ValidateAll() if the designated constraints aren't met.
type WearablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WearablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WearablesMultiError) AllErrors() []error { return m }

// WearablesValidationError is the validation error returned by
// Wearables.Validate if the designated constraints aren't met.
type WearablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WearablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WearablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WearablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WearablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WearablesValidationError) ErrorName() string { return "WearablesValidationError" }

// Error satisfies the builtin error interface
func (e WearablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWearables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WearablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WearablesValidationError{}

// Validate checks the field values on MetronionActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetronionActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetronionActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetronionActivityMultiError, or nil if none found.
func (m *MetronionActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *MetronionActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for FromAccount

	// no validation rules for ToAccount

	// no validation rules for Price

	// no validation rules for Timestamp

	// no validation rules for BlockNumber

	// no validation rules for TxHash

	if len(errors) > 0 {
		return MetronionActivityMultiError(errors)
	}

	return nil
}

// MetronionActivityMultiError is an error wrapping multiple validation errors
// returned by MetronionActivity.ValidateAll() if the designated constraints
// aren't met.
type MetronionActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetronionActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetronionActivityMultiError) AllErrors() []error { return m }

// MetronionActivityValidationError is the validation error returned by
// MetronionActivity.Validate if the designated constraints aren't met.
type MetronionActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetronionActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetronionActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetronionActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetronionActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetronionActivityValidationError) ErrorName() string {
	return "MetronionActivityValidationError"
}

// Error satisfies the builtin error interface
func (e MetronionActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetronionActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetronionActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetronionActivityValidationError{}

// Validate checks the field values on MetronionOffers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetronionOffers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetronionOffers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetronionOffersMultiError, or nil if none found.
func (m *MetronionOffers) ValidateAll() error {
	return m.validate(true)
}

func (m *MetronionOffers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FromAccount

	// no validation rules for Price

	// no validation rules for Timestamp

	// no validation rules for BlockNumber

	// no validation rules for TxHash

	if len(errors) > 0 {
		return MetronionOffersMultiError(errors)
	}

	return nil
}

// MetronionOffersMultiError is an error wrapping multiple validation errors
// returned by MetronionOffers.ValidateAll() if the designated constraints
// aren't met.
type MetronionOffersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetronionOffersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetronionOffersMultiError) AllErrors() []error { return m }

// MetronionOffersValidationError is the validation error returned by
// MetronionOffers.Validate if the designated constraints aren't met.
type MetronionOffersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetronionOffersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetronionOffersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetronionOffersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetronionOffersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetronionOffersValidationError) ErrorName() string { return "MetronionOffersValidationError" }

// Error satisfies the builtin error interface
func (e MetronionOffersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetronionOffers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetronionOffersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetronionOffersValidationError{}

// Validate checks the field values on MetronionListing with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetronionListing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetronionListing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetronionListingMultiError, or nil if none found.
func (m *MetronionListing) ValidateAll() error {
	return m.validate(true)
}

func (m *MetronionListing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FromAccount

	// no validation rules for Price

	// no validation rules for Timestamp

	// no validation rules for BlockNumber

	// no validation rules for TxHash

	if len(errors) > 0 {
		return MetronionListingMultiError(errors)
	}

	return nil
}

// MetronionListingMultiError is an error wrapping multiple validation errors
// returned by MetronionListing.ValidateAll() if the designated constraints
// aren't met.
type MetronionListingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetronionListingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetronionListingMultiError) AllErrors() []error { return m }

// MetronionListingValidationError is the validation error returned by
// MetronionListing.Validate if the designated constraints aren't met.
type MetronionListingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetronionListingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetronionListingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetronionListingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetronionListingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetronionListingValidationError) ErrorName() string { return "MetronionListingValidationError" }

// Error satisfies the builtin error interface
func (e MetronionListingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetronionListing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetronionListingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetronionListingValidationError{}

// Validate checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataRequestMultiError, or nil if none found.
func (m *GetMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := GetMetadataRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetadataRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetadataRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetadataRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetadataRequestMultiError(errors)
	}

	return nil
}

// GetMetadataRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetadataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataRequestMultiError) AllErrors() []error { return m }

// GetMetadataRequestValidationError is the validation error returned by
// GetMetadataRequest.Validate if the designated constraints aren't met.
type GetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataRequestValidationError) ErrorName() string {
	return "GetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataRequestValidationError{}

// Validate checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataResponseMultiError, or nil if none found.
func (m *GetMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for VersionId

	// no validation rules for CreatedAtTimestamp

	// no validation rules for UpdatedAtTimestamp

	// no validation rules for CreatedAtBlock

	// no validation rules for UpdatedAtBlock

	// no validation rules for Owner

	// no validation rules for LastPrice

	// no validation rules for CurrentPrice

	// no validation rules for TopBid

	// no validation rules for ListedBy

	// no validation rules for Image

	// no validation rules for Gender

	// no validation rules for Type

	// no validation rules for Star

	// no validation rules for SpecialStar

	if all {
		switch v := interface{}(m.GetBaseStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetadataResponseValidationError{
					field:  "BaseStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetadataResponseValidationError{
					field:  "BaseStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetadataResponseValidationError{
				field:  "BaseStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpecialStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetadataResponseValidationError{
					field:  "SpecialStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetadataResponseValidationError{
					field:  "SpecialStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpecialStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetadataResponseValidationError{
				field:  "SpecialStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWearables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetadataResponseValidationError{
						field:  fmt.Sprintf("Wearables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetadataResponseValidationError{
						field:  fmt.Sprintf("Wearables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetadataResponseValidationError{
					field:  fmt.Sprintf("Wearables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetadataResponseMultiError(errors)
	}

	return nil
}

// GetMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataResponseMultiError) AllErrors() []error { return m }

// GetMetadataResponseValidationError is the validation error returned by
// GetMetadataResponse.Validate if the designated constraints aren't met.
type GetMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataResponseValidationError) ErrorName() string {
	return "GetMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataResponseValidationError{}

// Validate checks the field values on GetListMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListMetadataRequestMultiError, or nil if none found.
func (m *GetListMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetAccount(); wrapper != nil {

		if !_GetListMetadataRequest_Account_Pattern.MatchString(wrapper.GetValue()) {
			err := GetListMetadataRequestValidationError{
				field:  "Account",
				reason: "value does not match regex pattern \"^0x[a-fA-F0-9]{40}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _GetListMetadataRequest_Sort_InLookup[m.GetSort()]; !ok {
		err := GetListMetadataRequestValidationError{
			field:  "Sort",
			reason: "value must be in list [ lowest_id highest_id lowest_price highest_price]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetListMetadataRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 0 || val > 50 {
		err := GetListMetadataRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListMetadataRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListMetadataRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListMetadataRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGender() {
		_, _ = idx, item

		if _, ok := _GetListMetadataRequest_Gender_InLookup[item]; !ok {
			err := GetListMetadataRequestValidationError{
				field:  fmt.Sprintf("Gender[%v]", idx),
				reason: "value must be in list [male female]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if _, ok := _GetListMetadataRequest_Status_InLookup[item]; !ok {
			err := GetListMetadataRequestValidationError{
				field:  fmt.Sprintf("Status[%v]", idx),
				reason: "value must be in list [for_sale has_offers]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetStat()) > 5 {
		err := GetListMetadataRequestValidationError{
			field:  "Stat",
			reason: "value must contain no more than 5 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetStat()))
		i := 0
		for key := range m.GetStat() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStat()[key]
			_ = val

			// no validation rules for Stat[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetListMetadataRequestValidationError{
							field:  fmt.Sprintf("Stat[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetListMetadataRequestValidationError{
							field:  fmt.Sprintf("Stat[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetListMetadataRequestValidationError{
						field:  fmt.Sprintf("Stat[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetListMetadataRequestMultiError(errors)
	}

	return nil
}

// GetListMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by GetListMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMetadataRequestMultiError) AllErrors() []error { return m }

// GetListMetadataRequestValidationError is the validation error returned by
// GetListMetadataRequest.Validate if the designated constraints aren't met.
type GetListMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMetadataRequestValidationError) ErrorName() string {
	return "GetListMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMetadataRequestValidationError{}

var _GetListMetadataRequest_Account_Pattern = regexp.MustCompile("^0x[a-fA-F0-9]{40}$")

var _GetListMetadataRequest_Sort_InLookup = map[string]struct{}{
	"":              {},
	"lowest_id":     {},
	"highest_id":    {},
	"lowest_price":  {},
	"highest_price": {},
}

var _GetListMetadataRequest_Gender_InLookup = map[string]struct{}{
	"male":   {},
	"female": {},
}

var _GetListMetadataRequest_Status_InLookup = map[string]struct{}{
	"for_sale":   {},
	"has_offers": {},
}

// Validate checks the field values on GetListMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListMetadataResponseMultiError, or nil if none found.
func (m *GetListMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListMetadataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListMetadataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListMetadataResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return GetListMetadataResponseMultiError(errors)
	}

	return nil
}

// GetListMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetListMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMetadataResponseMultiError) AllErrors() []error { return m }

// GetListMetadataResponseValidationError is the validation error returned by
// GetListMetadataResponse.Validate if the designated constraints aren't met.
type GetListMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMetadataResponseValidationError) ErrorName() string {
	return "GetListMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMetadataResponseValidationError{}

// Validate checks the field values on GetMetronionActivitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionActivitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionActivitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMetronionActivitiesRequestMultiError, or nil if none found.
func (m *GetMetronionActivitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionActivitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := GetMetronionActivitiesRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetronionActivitiesRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetronionActivitiesRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetronionActivitiesRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _GetMetronionActivitiesRequest_Sort_InLookup[m.GetSort()]; !ok {
		err := GetMetronionActivitiesRequestValidationError{
			field:  "Sort",
			reason: "value must be in list [ oldest newest]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetronionActivitiesRequestMultiError(errors)
	}

	return nil
}

// GetMetronionActivitiesRequestMultiError is an error wrapping multiple
// validation errors returned by GetMetronionActivitiesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetMetronionActivitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionActivitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionActivitiesRequestMultiError) AllErrors() []error { return m }

// GetMetronionActivitiesRequestValidationError is the validation error
// returned by GetMetronionActivitiesRequest.Validate if the designated
// constraints aren't met.
type GetMetronionActivitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionActivitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionActivitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionActivitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionActivitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionActivitiesRequestValidationError) ErrorName() string {
	return "GetMetronionActivitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionActivitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionActivitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionActivitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionActivitiesRequestValidationError{}

var _GetMetronionActivitiesRequest_Sort_InLookup = map[string]struct{}{
	"":       {},
	"oldest": {},
	"newest": {},
}

// Validate checks the field values on GetMetronionActivitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionActivitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionActivitiesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMetronionActivitiesResponseMultiError, or nil if none found.
func (m *GetMetronionActivitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionActivitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetronionActivitiesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetronionActivitiesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetronionActivitiesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetronionActivitiesResponseMultiError(errors)
	}

	return nil
}

// GetMetronionActivitiesResponseMultiError is an error wrapping multiple
// validation errors returned by GetMetronionActivitiesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetMetronionActivitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionActivitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionActivitiesResponseMultiError) AllErrors() []error { return m }

// GetMetronionActivitiesResponseValidationError is the validation error
// returned by GetMetronionActivitiesResponse.Validate if the designated
// constraints aren't met.
type GetMetronionActivitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionActivitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionActivitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionActivitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionActivitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionActivitiesResponseValidationError) ErrorName() string {
	return "GetMetronionActivitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionActivitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionActivitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionActivitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionActivitiesResponseValidationError{}

// Validate checks the field values on GetMetronionListingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionListingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionListingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetronionListingRequestMultiError, or nil if none found.
func (m *GetMetronionListingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionListingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := GetMetronionListingRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetronionListingRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetronionListingRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetronionListingRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetronionListingRequestMultiError(errors)
	}

	return nil
}

// GetMetronionListingRequestMultiError is an error wrapping multiple
// validation errors returned by GetMetronionListingRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMetronionListingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionListingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionListingRequestMultiError) AllErrors() []error { return m }

// GetMetronionListingRequestValidationError is the validation error returned
// by GetMetronionListingRequest.Validate if the designated constraints aren't met.
type GetMetronionListingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionListingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionListingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionListingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionListingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionListingRequestValidationError) ErrorName() string {
	return "GetMetronionListingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionListingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionListingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionListingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionListingRequestValidationError{}

// Validate checks the field values on GetMetronionListingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionListingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionListingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetronionListingResponseMultiError, or nil if none found.
func (m *GetMetronionListingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionListingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetronionListingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetronionListingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetronionListingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetronionListingResponseMultiError(errors)
	}

	return nil
}

// GetMetronionListingResponseMultiError is an error wrapping multiple
// validation errors returned by GetMetronionListingResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMetronionListingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionListingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionListingResponseMultiError) AllErrors() []error { return m }

// GetMetronionListingResponseValidationError is the validation error returned
// by GetMetronionListingResponse.Validate if the designated constraints
// aren't met.
type GetMetronionListingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionListingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionListingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionListingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionListingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionListingResponseValidationError) ErrorName() string {
	return "GetMetronionListingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionListingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionListingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionListingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionListingResponseValidationError{}

// Validate checks the field values on GetMetronionOffersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionOffersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionOffersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetronionOffersRequestMultiError, or nil if none found.
func (m *GetMetronionOffersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionOffersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := GetMetronionOffersRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetronionOffersRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetronionOffersRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetronionOffersRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _GetMetronionOffersRequest_Sort_InLookup[m.GetSort()]; !ok {
		err := GetMetronionOffersRequestValidationError{
			field:  "Sort",
			reason: "value must be in list [ oldest newest]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetronionOffersRequestMultiError(errors)
	}

	return nil
}

// GetMetronionOffersRequestMultiError is an error wrapping multiple validation
// errors returned by GetMetronionOffersRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMetronionOffersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionOffersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionOffersRequestMultiError) AllErrors() []error { return m }

// GetMetronionOffersRequestValidationError is the validation error returned by
// GetMetronionOffersRequest.Validate if the designated constraints aren't met.
type GetMetronionOffersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionOffersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionOffersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionOffersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionOffersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionOffersRequestValidationError) ErrorName() string {
	return "GetMetronionOffersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionOffersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionOffersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionOffersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionOffersRequestValidationError{}

var _GetMetronionOffersRequest_Sort_InLookup = map[string]struct{}{
	"":       {},
	"oldest": {},
	"newest": {},
}

// Validate checks the field values on GetMetronionOffersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetronionOffersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetronionOffersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetronionOffersResponseMultiError, or nil if none found.
func (m *GetMetronionOffersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetronionOffersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetronionOffersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetronionOffersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetronionOffersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetronionOffersResponseMultiError(errors)
	}

	return nil
}

// GetMetronionOffersResponseMultiError is an error wrapping multiple
// validation errors returned by GetMetronionOffersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMetronionOffersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetronionOffersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetronionOffersResponseMultiError) AllErrors() []error { return m }

// GetMetronionOffersResponseValidationError is the validation error returned
// by GetMetronionOffersResponse.Validate if the designated constraints aren't met.
type GetMetronionOffersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetronionOffersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetronionOffersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetronionOffersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetronionOffersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetronionOffersResponseValidationError) ErrorName() string {
	return "GetMetronionOffersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetronionOffersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetronionOffersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetronionOffersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetronionOffersResponseValidationError{}
